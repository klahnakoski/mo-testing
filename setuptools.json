{
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "classifiers": [
        "Development Status :: 4 - Beta",
        "Topic :: Software Development :: Libraries",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.9"
    ],
    "description": "More Testing! Extends the `unittest.TestCase` to provide deep, yet fuzzy, structural comparisons",
    "extras_require": {"tests": []},
    "include_package_data": true,
    "install_requires": [
        "mo-collections==5.45.21241",        "mo-dots==5.22.21182",
             "mo-future==5.17.21182",        "mo-logs==5.44.21241",
               "mo-math==5.53.21241",     "mo-threads==5.53.21241"
    ],
    "license": "MPL 2.0",
    "long_description": {
        "$concat": [
            "# More Testing",
            "",
            "`FuzzyTestCase` extends the `unittest.TestCase` to provide deep, yet fuzzy, structural comparisons; intended for use in test cases dealing with JSON.",
            "",
            "",
            "## Details",
            "",
            "The primary method is the `assertEqual` method with the following parameters:",
            "",
            "* `test_value` - the value, or structure being tested",
            "* `expected` - the expected value or structure.  In the case of a number, the accuracy is controlled by the following parameters.  In the case of a structure, only the not-null parameters of `expected` are tested for existence.",
            "* `msg` - Detailed error message if there is no match",
            "* `digits` - number of decimal places of accuracy required to consider two values equal",
            "* `places` - number of significant digits used to compare values for accuracy",
            "* `delta` - maximum difference between values for them to be equal",
            "",
            "This method `assertEqual` is recursive; it does a deep comparison; it can not handle cycles in the data structure.",
            "",
            "",
            ""
        ],
        "separator": "\n"
    },
    "long_description_content_type": "text/markdown",
    "name": "mo-testing",
    "packages": ["mo_testing"],
    "url": "https://github.com/klahnakoski/mo-testing",
    "version": "5.53.21241"
}